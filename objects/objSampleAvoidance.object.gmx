<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAvoidanceController</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>A sample avoidance controller</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set the music used for the avoidance
musicID=musOnDeath //Music used

//Uncomment the following code if the music is loaded externally. 
//In this example, the file would be named "Music\Avoidance.ogg"
//musicID = scrLoadMusic("Avoidance"); 


//Set the BPM of the song. Use Audacity or similar to detect it.
BPM = 120
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set the attack timings

BEAT_TIME=50/(BPM/60); //BEAT_TIME = time between beats in frames. Calculated from the BPM

//Add attacks using avoidance_add_attack. "END" should always be last
numTimings=0;

attackNames=ds_list_create();
attackTimings=ds_list_create();
avoidance_add_attack("ATTACK1",0);
avoidance_add_attack("ATTACK2",500);
avoidance_add_attack("ATTACK3",1000);
avoidance_add_attack("END",2000);



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set the debug keys

numDebugKeys=0;
debugKeys=ds_list_create();
debugKeyTimings=ds_list_create();
debugKeyStartX=ds_list_create();
debugKeyStartY=ds_list_create();


//Add debug keys here using avoidance_add_debug_key
avoidance_add_debug_key(ord("1"),500);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up the internal variables and start the avoidance

attack=0;


t=0;
t_music=0;
finish=false;
RealStep=0;


startTiming=0;
endTiming=attackTimings[|numTimings-1];//floor(audio_sound_length(musicID)*50);

if(instance_number(object_index)&gt;1) {
    
    instance_destroy();
    exit;
}

music_play(musicID,false);


//Reset infjump, nodeath and player gravity to avoid replay/restart bugs
global.noDeath=false; 
global.infJump=false; 
global.grav=1;


highlight=-1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up end room and boss item


autoWarp=true;

roomTo=rResults; //set the room to go to at the end of the avoidance. Disabled if autoWarp is set to false;
bossItem=-1; //set the boss item to award the player. Default is -1 =&gt; do not award any boss item
secretItem=-1; //set the secret item to award the player. Default is -1 =&gt; do not award any secret item

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Call the cleanup event
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Anti-desync - set RealStep according to music time


RealStep += room_speed * delta_time / 1000000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increment timer, sync to music
if(!instance_exists(objAvoidanceMarker)){
     instance_destroy();
     exit;
}
t++;
t_music=t;
//Anti-desync taken from Shift Engine.

if(t &gt; 0){
    var music_t = audio_sound_get_track_position(global.currentMusic) * 50;
    if(abs(t_music - music_t) &gt; 5){
        audio_sound_set_track_position(global.currentMusic,t_music / 50);
    }
}
if(attack&lt;numTimings-1){
    if(t&gt;attackTimings[| attack+1]){
        attack++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug timeline and keys

if(global.debugMode){
    if(keyboard_check_pressed(vk_space)){ //Set a debug snap on SPACE
        global.debugSnaps[global.numDebugSnaps]=t;
        global.numDebugSnaps++;
        show_debug_message(string(t));
    }
    if(point_in_rectangle(mouse_x,mouse_y,32,0,room_width-32,64)&amp;&amp;mouse_check_button_pressed(mb_left)){ //Navigate the timeline by clicking on it
        var trackPos=lerp(startTiming,endTiming,(mouse_x-32)/(room_width-64))
        avoidance_jump_to_timing(trackPos);
    }
    
    //Jump to a debug snap by clicking on it
    var spacing = 32;
    for(var i=0;i&lt;global.numDebugSnaps;++i){
        var snapX=room_width-64;
        var snapY=64+spacing*(i+1)
        if(point_in_rectangle(mouse_x,mouse_y,snapX,snapY,snapX+64,snapY+spacing)){
            highlight=i;
            if(mouse_check_button_pressed(mb_left)){
                var trackPos = global.debugSnaps[i];
                avoidance_jump_to_timing(trackPos);
            }
        }
    }
    //User made debug keys
    for(var i=0;i&lt;numDebugKeys;i++){
        if(keyboard_check_pressed(debugKeys[|i])){
            var trackPos = debugKeyTimings[|i];
            avoidance_jump_to_timing(trackPos);
            with(objPlayer){
                if(other.debugKeyStartX[|i]!=-1) x = other.debugKeyStartX[|i];
                if(other.debugKeyStartY[|i]!=-1) y = other.debugKeyStartY[|i];
            }
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacks
var ct=t-attackTimings[|attack];
var gt=t;
var BT=BEAT_TIME;

if(!instance_exists(objPlayer)) exit;

switch(attackNames[|attack]){ //Main attack loop
    case "ATTACK1":
    {   
        if(on_beat(ct,BT)){ // An example of a simple attack that spawns a flower every beat
           spawn_shape(400,304, random(360),6,20,6,objAvoidanceBullet,"flower",shaper_flower);
        }
        if(ct==1) rngController = rng_controller_create(4);
        else if(ct&gt;1&amp;&amp;ct mod 5 == 0){ //An example of an RNG-controlled barrage attack
            var bullet = instance_create_ext(400,304,objAvoidanceBullet,random_range(4,6),random_range_controlled(0,360,rngController),1,"test");
            bullet.sprite_index=sprBulletRazzor;
            bullet.image_index=13*rngController.bin;
            bullet.Type = "Hold";
        }
        
        if(ct==1){
            //view_rotate(180,200,tween_sine_inout);
            for(var i=0;i&lt;8;i++){ //An example of using a tracer to create a flower pattern
                var bullet = instance_create_ext(400,304,objAvoidanceBullet,3,360*i/8,1,"test");
                bullet.tag="curve";
                bullet.sprite_index=sprBulletArrowhead;
                
                bullet.image_angle=bullet.direction;
                tracer_attach(bullet,objAvoidanceBullet,300,16,"tail");
                instance_shrink_out(bullet,300);
            }
        }
        with(objAvoidanceBullet){
            if(tag=="curve"){
                direction+=0.04*(ct-50);
                image_index+=0.1;    
                image_angle=direction;
            }
        }
        break;
    }
    
    case "ATTACK2":
    {
        if(ct==1){
            var ca = random(360);
            spawn_shape(400,304,ca,6,30,6,objAvoidanceBullet,0,shaper_spiral); //an example of using spawn_shape with custom shapes
            spawn_shape(400,304,ca+180,6,30,6,objAvoidanceBullet,0,shaper_spiral);
            
        }
        break;
    }
    case "ATTACK3":
    {
        if(ct==1){ //An example of creating a 3D circle that morphs into a heart over time
        
            var heart = spawn_3D_shape(400,304,sprBulletRazzor,32,0,0,0.5,40,0,shaper_circle,5);
            heart.dPhase=0.0;
            heart.z=-100;
            heart.killer=true;
            heart.dTheta=0.25;
            instance_scale(heart,200,400,tween_linear);
            instance_morph(heart,shaper_heart,5,400,tween_sine_out);
        }
        break;
    }
    
    case "END":
    {
        if(ct==1){
        
            if(bossItem!=-1) global.bossItem[bossItem]=1;
            if(secretItem!=-1) global.secretItem[secretItem]=1;
            if(autoWarp){
                with(objPlayer) instance_destroy();
                room_goto(roomTo);
            }
        }
        break;
    }
    default:
    {
        show_debug_message("WARNING: Attack "+attackNames[|attack]+" is empty!");
        break;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean up


ds_list_destroy(attackNames);
ds_list_destroy(attackTimings);
ds_list_destroy(debugKeys);
ds_list_destroy(debugKeyTimings);
ds_list_destroy(debugKeyStartX);
ds_list_destroy(debugKeyStartY);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Call the cleanup event
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Call the cleanup event
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug timeline
if(global.debugMode){
    draw_set_alpha(1);
    draw_set_colour(c_white);
    draw_rectangle_colour(32,32,room_width-32,48,c_black,c_black,c_black,c_black,0);
    var barPosition=lerp(32,room_width-32,(t-startTiming)/(endTiming-startTiming));
    draw_rectangle_colour(barPosition-0.5,32+8-16,barPosition+0.5,32+8+16,c_white,c_white,c_white,c_white,0);
    for(var i=0;i&lt;numTimings;++i){ //Display attack timings
        var markPosition=lerp(32,room_width-32,(attackTimings[|i]-startTiming)/(endTiming-startTiming));
        draw_set_alpha(0.7);
        draw_rectangle_colour(markPosition-1.0,32+8-16,markPosition+1.0,32+8+16,c_white,c_white,c_white,c_white,0);
        draw_set_alpha(1);
    }
    draw_set_font(fDefault12);
    draw_set_colour(c_white);
    draw_text(room_width-64,64,t);
    var spacing=32;
    for(var i=0;i&lt;global.numDebugSnaps;++i){
        if(highlight==i) draw_set_colour(c_yellow);
        draw_text(room_width-64,64+spacing*(i+1),global.debugSnaps[i]);
        draw_set_colour(c_white);
        var markPosition=lerp(32,room_width-32,(global.debugSnaps[i]-startTiming)/(endTiming-startTiming));
        draw_set_alpha(0.7);
        draw_rectangle_colour(markPosition-0.8,32+8-12,markPosition+0.8,32+8+12,c_white,c_white,c_white,c_white,0);
        draw_set_alpha(1);
    }
    highlight=-1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// do nothing

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
