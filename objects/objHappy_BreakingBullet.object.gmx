<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBulletVariety</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objAvoidanceBullet</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables for trigonometric shit
image_speed=0;
image_tag=0;        //useless

cen_x=400;     //center x coordinates
cen_y=304;     //center y coordinates
deg_x=1;     //degrease length on x
deg_y=-10;     //degrease length on y
len=200;       //length
dir=0;       //direction
dir_inc=1;   //increase direction on every frame
len_inc=0;   //increase length on every frame
xx=0;
yy=0;

persist=true;
t=0;
t_inc=1;
tt=0;

finlen=0;    //length at it's final position, actually useless
findir=0;    //direction at it's final position
lendeg=0;
tag=0;
subtag=0;    //useless addiction to tag
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables for breaking effect
event_inherited();

flash_alpha=0;

bullet_size=1;
part_size=1;

part_cen_x=x;
part_cen_y=y;

part_alpha_max=1;

image_xscale=bullet_size;
image_yscale=image_xscale;

si=0;

part_t=0;

for (var i=0;i&lt;4;i++) {
    //sprite
    sind[i]=sprite_index;
    simg[i]=image_index;
    
    sxsc[i]=image_xscale;
    sysc[i]=image_yscale;
    sang[i]=0;
    scol[i]=image_blend;
    salp[i]=0;
    
    //part of the sprite + coordinates
    sgw=sprite_get_width(sind[i]);
    sgh=sprite_get_height(sind[i]);
    
    sgxoff=sprite_get_xoffset(sind[i]);
    sgyoff=sprite_get_yoffset(sind[i]);
    
    sw[i]=sgw/2;
    sh[i]=sgh/2;
    
    sxadd[i]=0;
    syadd[i]=0;
    ssubx[i]=0;
    ssuby[i]=0;
    
    sdir[i]=0;
    sspd[i]=0;
    
    switch(i) {
        case 0:
            sl[i]=0;
            st[i]=0;
            sx[i]=x-sw[i]*part_size/2-sgxoff*part_size/2+1;
            sy[i]=y-sh[i]*part_size/2-sgyoff*part_size/2;
        break;
        case 1:
            sl[i]=sgw/2;
            st[i]=0;
            sx[i]=x+sw[i]*part_size/2-sgxoff*part_size/2+1;
            sy[i]=y-sh[i]*part_size/2-sgyoff*part_size/2;
        break;
        case 2:
            sl[i]=0;
            st[i]=sgh/2;
            sx[i]=x-sw[i]*part_size/2-sgxoff*part_size/2+1;
            sy[i]=y+sh[i]*part_size/2-sgyoff*part_size/2;
        break;
        case 3:
            sl[i]=sgw/2;
            st[i]=sgh/2;
            sx[i]=x+sw[i]*part_size/2-sgxoff*part_size/2+1;
            sy[i]=y+sh[i]*part_size/2-sgyoff*part_size/2;
        break;
    }
    //at this point i dont know what does that 's' mean in the beginning
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resetting variables for each piece
part_t++;
if not (part_t&gt;=300 and part_t&lt;=500) {
    part_cen_x=x;
    part_cen_y=y;
    for (var i=0;i&lt;4;i++) {
        sxsc[i]=image_xscale;
        sxsc[i]=image_yscale;
    }
}
for (var i=0;i&lt;4;i++) {
    sxadd[i]+=dcos(sdir[i])*sspd[i];
    syadd[i]+=dsin(sdir[i])*sspd[i];
        switch(i) {
            case 0:
                sx[i]=part_cen_x-sw[i]*part_size/2-sgxoff*part_size/2;
                sy[i]=part_cen_y-sh[i]*part_size/2-sgyoff*part_size/2;
            break;
            case 1:
                sx[i]=part_cen_x+sw[i]*part_size/2-sgxoff*part_size/2;
                sy[i]=part_cen_y-sh[i]*part_size/2-sgyoff*part_size/2;
            break
            case 2:
                sx[i]=part_cen_x-sw[i]*part_size/2-sgxoff*part_size/2;
                sy[i]=part_cen_y+sh[i]*part_size/2-sgyoff*part_size/2;
            break
            case 3:
                sx[i]=part_cen_x+sw[i]*part_size/2-sgxoff*part_size/2;
                sy[i]=part_cen_y+sh[i]*part_size/2-sgyoff*part_size/2;
            break
        }
    sx[i]+=sxadd[i];
    sy[i]+=syadd[i];
}

/*image_xscale=bullet_size;
image_yscale=image_xscale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///part taken from objHappy_Bullet_trig

t++//=t_inc;
dir+=dir_inc;
len+=len_inc;

x=cen_x+len*cos(degtorad(dir))/deg_x;
y=cen_y+len*sin(degtorad(dir))/deg_y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Breaking effect and changing sprites
//I HAVE ABSOLUTELY NO IDEA HOW THIS SHIT STILL WORKING

part_t++;

if part_t&gt;125 and part_t&lt;299 {//and part_t&lt;400 {
    for (var i=0;i&lt;4;i++) {
        rand_angle[i]=random(360);
        sxadd[i]=dcos(rand_angle[i])*max(0,dsin((part_t-125)*195/(299-125-2))*2*bullet_size)
        syadd[i]=dsin(rand_angle[i])*max(0,dsin((part_t-125)*195/(299-125-2))*2*bullet_size)
        
        
        if part_t&lt;=200 {
            flash_alpha=EaseOutExpo(part_t-125,part_alpha_max,0,75);
            image_alpha=EaseOutExpo(part_t-125,part_alpha_max,0,75);
            salp[i]=EaseOutExpo(part_t-125,0,part_alpha_max,75);
        }
        
        if part_t&lt;175 {
            smercol[i]=275-part_t;
        }
        if part_t&gt;=175 and part_t&lt;=225 {
            smercol[i]=EaseOutSine(part_t-175,1,0.2,50);
        }
        if part_t&gt;=225 {
            smercol[i]=0.2;
        }
        scol[i]=choose(c_white,merge_colour(c_white,choose(c_red,c_blue,c_green),1/(smercol[i]*6)));
    }
}

if part_t==299 {
    for (var i=0;i&lt;4;i++) {
        sxadd[i]=0;
        syadd[i]=0;
        switch(i) {
            case 3: sdir[i]=45; break;
            case 2: sdir[i]=135; break;
            case 1: sdir[i]=315; break;
            case 0: sdir[i]=225; break;
        }
    }
    image_alpha=1;
    image_index=abs(image_index-1);
    image_xscale=bullet_size/3;
    image_yscale=bullet_size/3;
}

if part_t&gt;=300 and part_t&lt;=500 {
    a=EaseOutExpo(part_t-300,2,0.5,100);
    for (var i=0;i&lt;4;i++) {
        if part_t&lt;=425 {
            salp[i]=EaseOutQuart(part_t-300,1,0,125);
        }
        sspd[i]=a
        scol[i]=merge_colour(c_white,choose(c_red,c_blue,c_green),1/(0.2*6));
    }
    if t&lt;=400 {
        flash_alpha=EaseOutSine(part_t-300,1,0,100);
    }
    image_xscale=EaseOutExpo(part_t-300,bullet_size/3,bullet_size,200);
    image_yscale=image_xscale;
}

if part_t&gt;501 {
    for (var i=0;i&lt;4;i++) {
        simg[i]=image_index;
        
        sw[i]=sgw/2;
        sh[i]=sgh/2;
    
        sxsc[i]=image_xscale;
        sysc[i]=image_yscale;
        
        sspd[i]=0;
        
        scol[i]=c_white;
        
        salp[i]=0;
        
        sxadd[i]=0;
        syadd[i]=0;
    }
    
    part_t=1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_text(64,64,part_t);
draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,c_white,flash_alpha);
draw_set_blend_mode(bm_add);
for (var i=0;i&lt;4;i++) {
    draw_sprite_general(sind[i],simg[i],    //sprite
    sl[i],st[i],sw[i],sh[i],                //part of the sprite
    sx[i],sy[i],                            //coordinates
    sxsc[i],sysc[i],sang[i],                //scaling and angle
    scol[i],scol[i],scol[i],scol[i],        //color
    salp[i]);                               //alpha
}
draw_set_blend_mode(bm_normal);
/*draw_set_color(c_white);
draw_line_width(sx[0],sy[0],sx[3],sy[3],4);
draw_line_width(sx[1],sy[1],sx[2],sy[2],4);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
