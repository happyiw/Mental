<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sn=2;
for(i=0; i&lt;sn; i+=1){
sf[i]=-1;
}
num=0;
//ds_o=ds_list_create();

/*cre=instance_create(400,304,objCircle);
cre.num=num;
num++;
num=num mod 2;
alarm[0]=20;
ds_list_add(ds_o,cre);*/

affect_killer=true;
affect_block=true;
affect_player=true;
affect_platform=true;

color=c_red;
//affect_transition=true;
/*
margin=64;

repeat(6){
cre=instance_create(random_range(margin, 800-margin),random_range(margin, 608-margin),objArea);
cre.image_xscale=3;
cre.image_yscale=cre.image_xscale;
cre.image_angle=random(360);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i=0; i&lt;sn; i+=1){
    surface_free(sf[i]);
}
//ds_list_destroy(ds_o);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cre=instance_create(400,304,objCircle);
cre.num=num;
num++;
num=num mod 2;
ds_list_add(ds_o,cre);
//alarm[0]=20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i=0; i&lt;sn; i+=1){
    if (surface_get_width(sf[i])!=view_wview[view_current])||(surface_get_height(sf[i])!=view_hview[view_current]){
        surface_resize(sf[i], view_wview[view_current], view_hview[view_current])
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i=0; i&lt;sn; i+=1){
    if !surface_exists(sf[i]){
    sf[i]=surface_create(800,608);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i=0; i&lt;sn; i+=1){
    surface_free(sf[i]);
}
//ds_list_destroy(ds_o);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i=0; i&lt;sn; i+=1){
    surface_free(sf[i]);
}
//ds_list_destroy(ds_o);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*var __size = ds_list_size(ds_o), __o,
__vx=view_xview[view_current],
__vy=view_yview[view_current];

__o=ds_list_find_value(ds_o, 0);
if !instance_exists(__o){
    ds_list_delete(ds_o, 0);
}
__size = ds_list_size(ds_o);*/

var __vx=view_xview[view_current];
var __vy=view_yview[view_current];

event_user(0);
event_user(1);

surface_set_target(sf[0]);

draw_clear_alpha(0,1);
/*
for(var i=0; i&lt;__size; i++){
    __o=ds_list_find_value(ds_o, i);
    if !__o.num{
        draw_circle(400-__vx,304-__vy,__o.r,0);
    }

draw_set_blend_mode(bm_subtract);
    __o=ds_list_find_value(ds_o, i);
    if __o.num{
        draw_circle(400-__vx,304-__vy,__o.r,0);
    }
draw_set_blend_mode(bm_normal);
}
*/

draw_set_blend_mode(bm_subtract);
with objHappy_SFArea{
    //draw_self();
    draw_sprite_ext(sprite_index,image_index,x-__vx,y-__vy,image_xscale,image_yscale,image_angle,image_blend,image_alpha);
}
draw_set_blend_mode(bm_normal);

surface_reset_target();


surface_set_target(sf[1]);

draw_clear_alpha(color,1);

shader_set(shd_Black);

if affect_killer {
    with objAvoidanceBullet{
        //draw_self();
        draw_sprite_ext(sprite_index,image_index,x-__vx,y-__vy,image_xscale,image_yscale,image_angle,image_blend,image_alpha);
    }
}

if affect_block {
    with objBlock{
        //draw_self();
        draw_sprite_ext(sprite_index,image_index,x-__vx,y-__vy,image_xscale,image_yscale,image_angle,image_blend,image_alpha);
    }
}

if affect_platform {
    with objPlatform{
        //draw_self();
        draw_sprite_ext(sprite_index,image_index,x-__vx,y-__vy,image_xscale,image_yscale,image_angle,image_blend,image_alpha);
    }
}

if affect_player {
    with objPlayer{
        //draw_self();
        draw_sprite_ext(sprite_index,image_index,x-__vx,y-__vy,image_xscale*xScale,image_yscale*global.grav,image_angle,image_blend,image_alpha);
    }
}

/*if affect_transition {
    with objBullet_trig_transition {
        draw_self();
    }
}*/

shader_reset();

draw_set_blend_mode(bm_subtract);
draw_surface(sf[0],0,0);
draw_set_blend_mode(bm_normal);

surface_reset_target();



draw_surface(sf[1],__vx,__vy);






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i=0; i&lt;sn; i+=1){
    surface_free(sf[i]);
}
//ds_list_destroy(ds_o);
//room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i=0; i&lt;sn; i+=1){
    surface_free(sf[i]);
}
//ds_list_destroy(ds_o);
//game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
