<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAvoidanceController</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>A sample avoidance controller</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set the music used for the avoidance
musicID=musKeepMyMental; //Music used

//Uncomment the following code if the music is loaded externally. 
//In this example, the file would be named "Music\Avoidance.ogg"
//musicID = scrLoadMusic("Avoidance"); 


//Set the BPM of the song. Use Audacity or similar to detect it.
BPM = 220
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set the attack timings

BEAT_TIME=50/(BPM/60); //BEAT_TIME = time between beats in frames. Calculated from the BPM

//Add attacks using avoidance_add_attack. "END" should always be last
numTimings=0;
var BT=BEAT_TIME;
attackNames=ds_list_create();
attackTimings=ds_list_create();
avoidance_add_attack("Intro",0);

/*avoidance_add_attack("Intro_Anti_Aimed",floor(8*BT));
avoidance_add_attack("Intro Beatdown",550);
avoidance_add_attack("Intro Beatdown_Explosions",550+floor(16*BT));
avoidance_add_attack("Switching Streams",985);
avoidance_add_attack("Switching Streams_Fade",985+floor(28*BT));
avoidance_add_attack("Switching Streams_2",985+floor(32*BT));
avoidance_add_attack("Switching Streams_End",985+floor(56*BT));
avoidance_add_attack("Pumping Breaks",1860);
avoidance_add_attack("Acid Breaks",2731);
avoidance_add_attack("Melodic Stream",3604);
avoidance_add_attack("Winding Down",4478);
avoidance_add_attack("Acid Breaks 2",4914);
avoidance_add_attack("Stopping Beat",5785);
avoidance_add_attack("Stretch",6660);
avoidance_add_attack("Fragment of Silence",7532);
avoidance_add_attack("Ethereal",8405);
avoidance_add_attack("Melodic Bridge",9277);
avoidance_add_attack("Buildup Streams",10152);
avoidance_add_attack("Buildup Wind Down",10586);
avoidance_add_attack("Buildup Wind Down 2",11023);
avoidance_add_attack("Pre Drop Blasts",11895);
avoidance_add_attack("FIRE IN THE HOLE",12113);
avoidance_add_attack("Drop",12223);
avoidance_add_attack("Drop Acid",13095);
avoidance_add_attack("Drop Breakbeat",13968);
avoidance_add_attack("Outro",14841);
avoidance_add_attack("Final Burst",15714);
avoidance_add_attack("END",16250);*/

avoidance_add_attack("Climbing up",4940);
avoidance_add_attack("Drop",5810);
avoidance_add_attack("End",7150);

blastTag=0;

switchAngle1 = 75;
switchAngle2 = 165;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set the debug keys

numDebugKeys=0;
debugKeys=ds_list_create();
debugKeyTimings=ds_list_create();
debugKeyStartX=ds_list_create();
debugKeyStartY=ds_list_create();


//Add debug keys here using avoidance_add_debug_key
avoidance_add_debug_key(ord("1"),500);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up the internal variables and start the avoidance

attack=0;


t=global.debugAvoidanceStartTime;//4940;
t_music=0;
finish=false;
RealStep=0;


startTiming=0;
endTiming=attackTimings[|numTimings-1];//floor(audio_sound_length(musicID)*50);

if(instance_number(object_index)&gt;1) {
    
    instance_destroy();
    exit;
}

music_play(musicID,false);


//Reset infjump, nodeath and player gravity to avoid replay/restart bugs
global.noDeath=false; 
global.infJump=false; 
global.grav=1;


highlight=-1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up end room and boss item


autoWarp=true;

roomTo=rResults; //set the room to go to at the end of the avoidance. Disabled if autoWarp is set to false;
bossItem=-1; //set the boss item to award the player. Default is -1 =&gt; do not award any boss item
secretItem=-1; //set the secret item to award the player. Default is -1 =&gt; do not award any secret item

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Call the cleanup event
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Anti-desync - set RealStep according to music time


RealStep += room_speed * delta_time / 1000000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increment timer, sync to music
if(!instance_exists(objAvoidanceMarker)){
     instance_destroy();
     exit;
}
t++;
t_music=t;
//Anti-desync taken from Shift Engine.

if(t &gt; 0){
    var music_t = audio_sound_get_track_position(global.currentMusic) * 50;
    if(abs(t_music - music_t) &gt; 5){
        audio_sound_set_track_position(global.currentMusic,t_music / 50);
    }
}
if global.debugMode and keyboard_check_pressed(vk_space) {
    show_debug_message(t)
}

if global.debugMode and keyboard_check_pressed(ord("T")) {
    global.debugAvoidanceStartTime = get_integer('Start time', 0)-1
}
if(attack&lt;numTimings-1){
    if(t&gt;attackTimings[| attack+1]){
        attack++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug timeline and keys

if(global.debugMode){
    if(keyboard_check_pressed(vk_space)){ //Set a debug snap on SPACE
        global.debugSnaps[global.numDebugSnaps]=t;
        global.numDebugSnaps++;
        show_debug_message(string(t));
    }
    if(point_in_rectangle(mouse_x,mouse_y,32,0,room_width-32,64)&amp;&amp;mouse_check_button_pressed(mb_left)){ //Navigate the timeline by clicking on it
        var trackPos=lerp(startTiming,endTiming,(mouse_x-32)/(room_width-64))
        avoidance_jump_to_timing(trackPos);
    }
    
    //Jump to a debug snap by clicking on it
    var spacing = 32;
    for(var i=0;i&lt;global.numDebugSnaps;++i){
        var snapX=room_width-64;
        var snapY=64+spacing*(i+1)
        if(point_in_rectangle(mouse_x,mouse_y,snapX,snapY,snapX+64,snapY+spacing)){
            highlight=i;
            if(mouse_check_button_pressed(mb_left)){
                var trackPos = global.debugSnaps[i];
                avoidance_jump_to_timing(trackPos);
            }
        }
    }
    //User made debug keys
    for(var i=0;i&lt;numDebugKeys;i++){
        if(keyboard_check_pressed(debugKeys[|i])){
            var trackPos = debugKeyTimings[|i];
            avoidance_jump_to_timing(trackPos);
            with(objPlayer){
                if(other.debugKeyStartX[|i]!=-1) x = other.debugKeyStartX[|i];
                if(other.debugKeyStartY[|i]!=-1) y = other.debugKeyStartY[|i];
            }
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>objMainAvoidance</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacks
var ct=t-attackTimings[|attack];
var gt=t;
var BT=BEAT_TIME;

if(!instance_exists(objPlayer)) exit;

/*switch(attackNames[|attack]){ //Main attack loop
    case "Intro":
    {   
        if(ct==1){
        
            var darkness=instance_create(0,0,objPShaderRectangle);
            darkness.shader=shEasyShaderExample;
            darkness.intensity=0;
            darkness.image_alpha=1.0;
            darkness.depth=-999999;
            darkness.image_blend=c_black;
            instance_fade_out(darkness,50);
            
            
            var shBG=instance_create(0,0,objPShaderRectangle);
            shBG.shader=shPlasma;
            shBG.intensity=0.1;
            shBG.image_alpha=.25;
            shBG.depth=9999999;
            var sh=instance_create(0,0,objPShaderEffect);
            sh.shader=shChromaticAberration2;
            sh.intensity=0.00;
            instance_change_variable(sh,"intensity",0.01,floor(8*BT),tween_linear);
        }
    
        if(on_beat(ct,0.5*BT,1)){
            var aa = random(360);
            var bx = random_range(200,600);
            var by = random_range(32,128);
            spawn_circle(bx,by,aa,32,2+12*ct/(8*BT),objAvoidanceBullet,"intro_circle");
            spawn_circle(bx,by,aa,32,3+16*ct/(8*BT),objAvoidanceBullet,"intro_circle_small");
            with(objAvoidanceBullet){
                sprite_index=sprPCircle;
                image_index=1;
                if(tag=="intro_circle_small"){
                    sprite_index=sprBulletRazzor;
                    image_xscale=0.75;
                    image_yscale=0.25;
                    image_angle=direction;   
                }
            }
        }
        break;
    }
    case "Intro_Anti_Aimed":
    {
        if(ct==1){
            with(objPShaderEffect){
                intensity=0.02;
                instance_change_variable(id,"intensity",0.002,floor(4*BT)-2,tween_linear);
            }
            view_screen_shake(8,8);
            with(objAvoidanceBullet){
                image_xscale*=4;
                image_yscale*=4;
                direction=point_direction(objPlayer.x,objPlayer.y,x,y);
                image_angle=direction;
                speed=24;
                destroyOutside=true;
            }
            for(var i=-1;i&lt;2;i++){
                var bx = 400 - 200*i - 16;
                var by = 608 - 128;
                block_create(bx,by,1000000,bCMI,32,96);
                var bullet=instance_create(bx,by+32,objAvoidanceBullet);
                bullet.Type = "Hold";
                with(bullet) path_start(pAroundBlock,3,path_action_restart,false);
                bullet.image_index=8;
                bullet.tag="around_block";
            }
        }   
        var cct = ct mod floor(8*BT);
        if(ct&lt;floor(31*BT)){
            if(cct==1){
                with(objPShaderEffect){
                    intensity=0.002;
                }
            }else if(cct==floor(4*BT)){
                with(objPShaderEffect){
                    intensity=0.01;
                }
            }
        }
        if(on_beat(cct,BT,1)&amp;&amp;cct&lt;floor(4*BT)){
            var N = 31;
            var bx = 400;
            var by = 0;
            var aa = point_direction(bx,by,objPlayer.x,objPlayer.y)+180;
            //spawn_circle(bx,by,aa,N,12,objAvoidanceBullet,"intro_circle");
            spawn_circle(bx,by,aa,N,18,objAvoidanceBullet,"intro_circle_small_2");
            spawn_circle(bx,by,aa,N,17,objAvoidanceBullet,"intro_circle_small_2");
            spawn_circle(bx,by,aa,N,16,objAvoidanceBullet,"intro_circle_small_2");
            spawn_circle(bx,by,aa,N,15,objAvoidanceBullet,"intro_circle_small_2");
            with(objAvoidanceBullet){
                if(tag=="intro_circle_small_2"){
                    image_index=6;
                    sprite_index=sprBulletRazzor;
                    image_xscale=0.75;
                    image_yscale=0.25;
                    image_angle=direction;   
                    destroyOutside=true;
                    blastTag=speed-15;
                }
            }
        }
        if(cct==floor(4*BT)){
            with(objAvoidanceBullet){
                if(tag=="intro_circle_small_2") speed=0;
            }
            blastTag=0;
        }
        if(cct==floor(4*BT)||cct==floor(4.5*BT)||cct==floor(5*BT)||cct==floor(5.5*BT)){
            
            with(objAvoidanceBullet){
                if(tag=="intro_circle_small_2"){
                    if(blastTag==other.blastTag){
                        image_xscale*=3;
                        image_yscale*=3;
                        instance_change_variable(id,"image_xscale",0.75,30,tween_sine_out);
                        instance_change_variable(id,"image_yscale",0.25,30,tween_sine_out);
                        
                        speed=random_range(4,5);
                        direction = random(360);
                        image_angle = direction;
                        tag="intro_circle_small_2_spawn";
                    }
                }
            }
            blastTag++;
        }
        if(ct==floor(31*BT)){
            view_screen_shake(8,8);
            with(objPShaderEffect) shader=shStaticInvert;
            with(objAvoidanceBullet) {
                Type="Hold";
                speed/=5;
            }
        }
        break;
    }
    case "Intro Beatdown":
    {   
    
        if(ct==1){
            with(objPShaderEffect) shader=shChromaticAberration2;
            with(objAvoidanceBullet){
                if(tag!="around_block"){
                    image_xscale*=4;
                    image_yscale*=4;
                    direction=point_direction(objPlayer.x,objPlayer.y,x,y);
                    image_angle=direction;
                    speed=24;
                    destroyOutside=true;
                }else{
                    path_speed*=0.5;
                }
            }
        }
        var cct = ct mod floor(8*BT);
        
        if(cct==2||cct==floor(0.75*BT)||cct==floor(1.5*BT)||cct==floor(2.25*BT)||cct==floor(3*BT)){
            view_screen_shake(24,8);
            view_angle[0]=random_range(-15,15);
            with(objPShaderEffect){
                intensity=0.03;
                instance_change_variable(id,"intensity",0.002,10,tween_linear);
            }
            
            var aa = random(360);
            var bx = random_range(200,600);
            var by = random_range(-15,15);
            spawn_circle(bx,by,aa,6,8,objAvoidanceBullet,"ao_circle");
            with(objAvoidanceBullet){
                if(tag=="ao_circle"){
                    sprite_index=sprPCircle;
                    image_index=2;
                    image_xscale=8;
                    image_yscale=8;
                    image_angle=direction;   
                    gravity=0.3;
                    destroyOutside=true;
                    Type="Hold";
                    instance_scale(id,image_xscale/4,floor(4*BT),tween_linear);
                    
                }
            }
        }
        if(cct==floor(3*BT)){
            view_rotate(0,30,tween_sine_out);
        }
        with(objAvoidanceBullet){
            if(tag=="ao_circle") if(x&gt;800-32&amp;&amp;hspeed&gt;0||x&lt;32&amp;&amp;hspeed&lt;0) hspeed=-hspeed;
        }
        if(on_beat(ct,8,2)){
            with(objAvoidanceBullet){
                if(tag=="ao_circle"){
                    var trail=object_copy(objAvoidanceCosmetic);
                    trail.speed=random(5);
                    trail.direction=random(360);
                    instance_shrink_out(trail,30);
                }
            }
        }
        break;
    }
    case "Intro Beatdown_Explosions":
    {
        if(ct==1){
            
        }
        if(on_beat(ct,4*BT,2)||ct&gt;floor(8*BT)&amp;&amp;on_beat(ct,2*BT,2)||ct&gt;floor(12*BT)&amp;&amp;on_beat(ct,BT,2)){
            view_screen_shake(8,8);
            with(objPShaderEffect){
                intensity=0.01;
                instance_change_variable(id,"intensity",0.002,10,tween_linear);
            }
            repeat(40){
                var bullet = instance_create_ext(400,0,objAvoidanceBullet,random_range(2,18),-random(180),1,"beatdown_explosions");
            }
            with(objAvoidanceBullet){
                if(tag=="beatdown_explosions"){
                    image_index=6;
                    sprite_index=sprBulletRazzor;
                    image_xscale=0.75*3;
                    image_yscale=0.25*3;
                    instance_change_variable(id,"image_xscale",0.75,30,tween_sine_out);
                    instance_change_variable(id,"image_yscale",0.25,30,tween_sine_out);
                    image_angle=direction;   
                    destroyOutside=true;
                }
            }
        }
        if(ct==floor(15*BT)){
            with(objPShaderEffect){
                shader=shStaticInvert;
            }
        }   
        break;
    }
    case "Switching Streams":
    {   
        var cct = ct%floor(8*BT);
        //switchAngle1++;
        //switchAngle2+=1.5;
        if(ct==1){
            //burst away
            with(objPShaderEffect){
                shader=shChromaticAberration2;
                intensity=0.1;
                instance_change_variable(id,"intensity",0,50,tween_sine_out);
            }   
            with(objPShaderRectangle) instance_destroy();
            for(var i=-1;i&lt;2;i++){
                var bx = 400 - 200*i - 16;
                var by = 608 - 128;
                block_break(bx,by,1000000);
                
            }
            view_screen_shake(8,8);
            with(objPShaderEffect){
                intensity=0.01;
                instance_change_variable(id,"intensity",0.002,10,tween_linear);
            }
            with(objAvoidanceBullet){
                if(tag=="around_block"){
                    path_end();
                    
                }
                image_xscale*=4;
                image_yscale*=4;
                direction=point_direction(objPlayer.x,objPlayer.y,x,y);
                image_angle=direction;
                speed=24;
                destroyOutside=true;
            }
            
            spawn_circle(400,0,random(360),80,24,objAvoidanceBullet,"combo_circle");
            with(objAvoidanceBullet){
                if(tag=="combo_circle"){
                    image_index=0;
                    sprite_index=sprBulletRazzor;
                    image_xscale=3*0.75;
                    image_yscale=3*0.25;
                    image_angle=direction;   
                    destroyOutside=true;
                }
            }
            //fast circle burst to allow the player to maintain their combo
            
            
        }
        //switching streams
        if(on_beat(ct,2,1)){
            
            if(cct&lt;floor(4*BT)){
                    var ca=switchAngle1; 
                    var ctag="switching_stream_1";
            }else{
                    var ca=switchAngle2;  
                    var ctag="switching_stream_2";
            }
            var ccy=random_range(-400,400);
            var ccx=400;
            var cx = 400+ccx*dcos(ca)-ccy*dsin(ca);
            var cy = 304-ccx*dsin(ca)-ccy*dcos(ca);
            
            var bullet = instance_create_ext(cx,cy,objAvoidanceBullet,12,ca+180+random_range(-5,5),1,ctag);
            bullet.destroyOutside=false;
            if(cct&lt;floor(4*BT)){
                bullet.image_index=0;
            }
        }
        if(cct==1){
            with(objAvoidanceBullet){
                if(tag=="switching_stream_2"){
                    image_alpha=0.5;
                    killer=false;
                    speed=0;
                }else if(tag=="switching_stream_1"){
                    image_alpha=1.0;
                    killer=true;
                    speed=12;
                }
            }
            with(objAvoidanceCosmetic){
                if(tag=="cosmetic"){
                    instance_change_variable(id,"image_index",0,30,tween_sine_out);
                }
            }
        }
        else if(cct==floor(4*BT)){
            with(objAvoidanceBullet){
                if(tag=="switching_stream_1"){
                    image_alpha=0.5;
                    killer=false;
                    speed=0;
                }else if(tag=="switching_stream_2"){
                    image_alpha=1.0;
                    killer=true;
                    speed=12;
                } 
            }
            with(objAvoidanceCosmetic){
                if(tag=="cosmetic"){
                    instance_change_variable(id,"image_index",3,30,tween_sine_out);
                }
            }
        }
        //trails
        
        if(on_beat(ct,8,2)){
            with(objAvoidanceBullet){
                if(tag=="switching_stream_1"||tag=="switching_stream_2"){
                    if(killer){
                        var trail=object_copy(objAvoidanceCosmetic);
                        trail.speed=random(5);
                        trail.direction=random(360);
                        instance_shrink_out(trail,15);
                    }
                }
            }
        }
        
        //background cosmetic particles
        
        var cosm = instance_create_ext(400,304,objAvoidanceCosmetic,8,random(360),0,"cosmetic");
        cosm.image_alpha=0;
        instance_scale(cosm,4,100,tween_linear);
        instance_change_alpha(cosm,0.3,100,tween_linear);
        if(cct&lt;floor(4*BT)){
            cosm.image_index=0;
        }
    
        with(objAvoidanceCosmetic){
            if(x&gt;800+image_xscale||x&lt;-image_xscale||y&gt;608+image_yscale||y&lt;-image_yscale) instance_destroy();
        }
        break;
    }
    case "Switching Streams_Fade":
    {
    
        if(ct==1){
            view_screen_shake(4,floor(4*BT));
            with(objPShaderEffect){
                intensity=0.02;
            }
            
            with(objAvoidanceBullet){
                instance_change_alpha(id,1,20,tween_linear);
                killer=true;
                Type="Hold";
            }
        }
        show_debug_message(lerp(864,-64,ct/(4*BT)));
        with(objAvoidanceBullet){
            if(x&gt;800+view_xview[0]||x&lt;view_xview[0]||y&gt;608+view_yview[0]||y&lt;view_yview[0])
                instance_destroy();
            else if(x&gt;lerp(864,-64,ct/(4*BT))&amp;&amp;tag!="switching_stream_fade"){
                repeat(20){
                    var bullet = object_copy(objAvoidanceBullet);
                    bullet.speed=random_range(6,12);
                    bullet.direction=random(360);
                    bullet.killer=false;
                    bullet.image_alpha=1;
                    bullet.tag="switching_stream_fade";
                    bullet.Type="Collect";
                    bullet.destroyOutside=true;
                }   
                
                instance_destroy();
            }
            if(x-32&gt;lerp(864,-64,ct/(4*BT))){
                gravity=-0.4;
            }
        }
        var cosm = instance_create_ext(400,304,objAvoidanceCosmetic,8,random(360),0,"cosmetic");
        cosm.image_alpha=0;
        instance_scale(cosm,4,100,tween_linear);
        instance_change_alpha(cosm,0.3,100,tween_linear);
        if(!irandom(1)){
            cosm.image_index=0;
        }
    
        with(objAvoidanceCosmetic){
            if(x&gt;800+image_xscale||x&lt;-image_xscale||y&gt;608+image_yscale||y&lt;-image_yscale) instance_destroy();
        }
        
        break;
    }
    case "Switching Streams_2":
    {
        if(ct==1){
            switchAngle1=180-switchAngle1;
            switchAngle2=180-switchAngle2;
            //burst away
            view_screen_shake(8,8);
            with(objPShaderEffect){
                shader=shChromaticAberration2;
                intensity=0.1;
                instance_change_variable(id,"intensity",0,50,tween_sine_out);
            }   
            
            spawn_circle(400,0,random(360),80,24,objAvoidanceBullet,"combo_circle");
            with(objAvoidanceBullet){
                if(tag=="combo_circle"){
                    image_index=0;
                    sprite_index=sprBulletRazzor;
                    image_xscale=3*0.75;
                    image_yscale=3*0.25;
                    image_angle=direction;   
                    destroyOutside=true;
                }
            }
            //fast circle burst to allow the player to maintain their combo
            
            
        }
        //curving switching streams
        var cct = ct%floor(8*BT);
    
        if(on_beat(ct,2,1)){
            
            if(cct&lt;floor(4*BT)){
                    var ca=switchAngle1; 
                    var ctag="switching_stream_1";
            }else{
                    var ca=switchAngle2;  
                    var ctag="switching_stream_2";
            }
            var ccy=random_range(-400,400);
            var ccx=400;
            var cx = 400+ccx*dcos(ca)-ccy*dsin(ca);
            var cy = 304-ccx*dsin(ca)-ccy*dcos(ca);
            
            var bullet = instance_create_ext(cx,cy,objAvoidanceBullet,12,ca+180+random_range(-5,5),1,ctag);
            bullet.destroyOutside=false;
            bullet.curveSpeed=random_range(0,0.5);
            if(cct&lt;floor(4*BT)){
                bullet.image_index=4;
            }else{
                bullet.image_index=6;
            }
        }
        if(cct==1){
            with(objAvoidanceBullet){
                if(tag=="switching_stream_2"){
                    image_alpha=0.5;
                    killer=false;
                    speed=0;
                }else if(tag=="switching_stream_1"){
                    image_alpha=1.0;
                    killer=true;
                    speed=12;
                }
            }
            with(objAvoidanceCosmetic){
                if(tag=="cosmetic"){
                    instance_change_variable(id,"image_index",4,30,tween_sine_out);
                }
            }
        }
        else if(cct==floor(4*BT)){
            with(objAvoidanceBullet){
                if(tag=="switching_stream_1"){
                    image_alpha=0.5;
                    killer=false;
                    speed=0;
                }else if(tag=="switching_stream_2"){
                    image_alpha=1.0;
                    killer=true;
                    speed=12;
                } 
            }
            with(objAvoidanceCosmetic){
                if(tag=="cosmetic"){
                    instance_change_variable(id,"image_index",6,30,tween_sine_out);
                }
            }
        }
        //cosmetic trails
        
        if(on_beat(ct,8,2)){
            with(objAvoidanceBullet){
                if(tag=="switching_stream_1"||tag=="switching_stream_2"){
                    if(killer){
                        var trail=object_copy(objAvoidanceCosmetic);
                        trail.speed=random(5);
                        trail.direction=random(360);
                        instance_shrink_out(trail,15);
                    }
                }
            }
        }
        
        //cosmetic particles
        
        var cosm = instance_create_ext(400,304,objAvoidanceCosmetic,8,random(360),0,"cosmetic");
        cosm.image_alpha=0;
        instance_scale(cosm,4,100,tween_linear);
        instance_change_alpha(cosm,0.3,100,tween_linear);
        if(cct&lt;floor(4*BT)){
            cosm.image_index=4;
        }else{
            cosm.image_index=6;
        }
    
        with(objAvoidanceCosmetic){
            if(x&gt;800+image_xscale||x&lt;-image_xscale||y&gt;608+image_yscale||y&lt;-image_yscale) instance_destroy();
        }
        
        break;
    }
    case "Switching Streams_End":
    
    {
    
    
        //Make sure the curving stuff despawns
        
        with(objAvoidanceBullet){
            if(destroyOutside&amp;&amp;(x&gt;800+view_xview[0]&amp;&amp;hspeed&gt;0||x&lt;view_xview[0]&amp;&amp;hspeed&lt;0||y&gt;608+view_yview[0]&amp;&amp;vspeed&gt;0||y&lt;view_yview[0]&amp;&amp;vspeed&lt;0))
                instance_destroy();
        }
        if(ct&gt;floor(4*BT)){
            switchAngle1+=0.5;
            switchAngle2+=0.5;
        }
        var cct = ct%floor(8*BT);
        if(ct==1){
            with(objAvoidanceBullet){
                if(tag=="switching_stream_1"||tag=="switching_stream_2"){
                    image_alpha=1.0;
                    killer=true;
                    speed=12;
                } 
            }
        }
        if(on_beat(ct,2,1)||ct&gt;floor(4*BT)){
            for(var i=0;i&lt;2;i++){
                if(i==0){
                        var ca=switchAngle1; 
                        var ctag="switching_stream_1";
                }else{
                        var ca=switchAngle2;  
                        var ctag="switching_stream_2";
                }
                var ccy = random_range(-400,400);
                var ccx = 400;
                var cx = 400+ccx*dcos(ca)-ccy*dsin(ca);
                var cy = 304-ccx*dsin(ca)-ccy*dcos(ca);
                
                var bullet = instance_create_ext(cx,cy,objAvoidanceBullet,12+6*(ct&gt;floor(4*BT)),ca+180+random_range(-5,5),1,ctag);
                bullet.destroyOutside=false;
                bullet.curveSpeed=random_range(0,0.5);
                if(i==0){
                    bullet.image_index=4;
                }else{
                    bullet.image_index=6;
                }
                bullet.destroyOutside=true;
            }
        }
        if(ct==floor(4*BT)){
            with(objAvoidanceBullet) speed*=1.5;
            with(objPShaderEffect){
                intensity=0.02;
            }
            view_screen_shake(4,floor(4*BT));
        }
        //cosmetic trails
        if(on_beat(ct,8,2)){
            with(objAvoidanceBullet){
                if(tag=="switching_stream_1"||tag=="switching_stream_2"){
                    if(killer){
                        var trail=object_copy(objAvoidanceCosmetic);
                        trail.speed=random(5);
                        trail.direction=random(360);
                        instance_shrink_out(trail,15);
                    }
                }
            }
        }
        
        //cosmetic particles
        
        var cosm = instance_create_ext(400,304,objAvoidanceCosmetic,8,random(360),0,"cosmetic");
        cosm.image_alpha=0;
        instance_scale(cosm,4,100,tween_linear);
        instance_change_alpha(cosm,0.3,100,tween_linear);
        if(!irandom(1)){
            cosm.image_index=4;
        }else{
            cosm.image_index=6;
        }
        if(ct&gt;floor(4*BT)){
            instance_change_alpha(cosm,0.3,50,tween_linear);
            instance_scale(cosm,4,50,tween_linear);
            cosm.speed*=1.5;
            cosm.curveSpeed=random_range(-0.5,0.5);
        }
        with(objAvoidanceCosmetic){
            if(x&gt;800+image_xscale||x&lt;-image_xscale||y&gt;608+image_yscale||y&lt;-image_yscale) instance_destroy();
        }
        
        break;
    }
    case "Pumping Breaks":
    {   
    
    
        break;
    }
    case "Acid Breaks":
    {   
    
    
        break;
    }
    case "Melodic Stream":
    {   
    
    
        break;
    }
    case "Winding Down":
    {   
    
    
        break;
    }
    case "Acid Breaks 2":
    {   
    
    
        break;
    }
    case "Stopping Beat":
    {   
    
    
        break;
    }
    case "Stretch":
    {   
    
    
        break;
    }
    case "Fragment of Silence":
    {   
    
    
        break;
    }
    case "Ethereal":
    {   
    
    
        break;
    }
    case "Melodic Bridge":
    {   
    
    
        break;
    }
    case "Buildup Streams":
    {   
    
    
        break;
    }
    case "Buildup Wind Down":
    {   
    
    
        break;
    }
    case "Buildup Wind Down 2":
    {   
    
    
        break;
    }
    case "Pre Drop Blasts":
    {   
    
    
        break;
    }
    case "FIRE IN THE HOLE":
    {   
    
    
        break;
    }
    case "Drop":
    {   
    
    
        break;
    }
    case "Drop Acid":
    {   
    
    
        break;
    }
    case "Drop Breakbeat":
    {   
    
    
        break;
    }
    case "Outro":
    {   
    
    
        break;
    }
    case "Final Burst":
    {   
    
    
        break;
    }
    case "END":
    {
        if(ct==1){
        
            if(bossItem!=-1) global.bossItem[bossItem]=1;
            if(secretItem!=-1) global.secretItem[secretItem]=1;
            if(autoWarp){
                with(objPlayer) instance_destroy();
                room_goto(roomTo);
            }
        }
        break;
    }
    default:
    {
        show_debug_message("WARNING: Attack "+attackNames[|attack]+" is empty!");
        break;
    }
}*/


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>happy's parts</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Segment №6: 1:41 - 1:58 (frames: 4940 - 5810 (transition at 4880-4940))

if instance_exists(objPlayer) {

if t==4940 {
    platform_speed_middle = 1.4//irandom_range(1.5,2);
    for (var y_delay=0; y_delay&lt;624;y_delay+=104) {
        var line_cherry_case = irandom_range(1,10);
        /*
        1 - semi-transparent cherry
        2 - usual cherry
        3 - 'hold' cherry
        4 - 'penalty' cherry
        */
        obj = instance_create(400 - 16,y_delay  + 500,objHappy_Platform);
        obj.speed = platform_speed_middle
        obj.direction = 90;
        if y_delay != 0 {
            /*obj_cherry = instance_create(400,y_delay - 16  + 400,objHappy_Bullet_01);
            obj_cherry.speed = obj.speed;
            obj_cherry.direction = obj.direction;
            obj_cherry.sprite_index=choose(sprHappy_MayuCherry,sprHappy_WBCherry);
            obj_cherry.tag='S6_follow_platform';
            obj_cherry.persist=true;
            obj_cherry.aimlock=false;
            if line_cherry_case == 1 {
                obj_cherry.killer = false;
                obj_cherry.image_alpha = 0.4;
            }
            if line_cherry_case == 5 or line_cherry_case == 6 { obj_cherry.Type = "Hold" }
            if line_cherry_case == 7 { 
                obj_cherry.Type = "Penalty"; 
                obj_cherry.sprite_index=sprHappy_MayuCherry;
                obj_cherry.image_blend=merge_color(c_white,c_red,0.5);
            }*/
        }
        with(objPlayer) { instance_destroy(); }
        var player = instance_create(400+16,128,objPlayer);
        //player.gravity=0;
    }
    
    for (var x_delay=96; x_delay&lt;400; x_delay+=96) {
        platform_speed = irandom_range(1.5,2) + (x_delay div 64)/4;
        for (x_mirror=-1; x_mirror&lt;=1; x_mirror+=2) {
            for (var y_delay=0; y_delay&lt;624;y_delay+=104) {
                var line_cherry_case = irandom_range(1,10);
                obj = instance_create(400 + x_delay * x_mirror - 16,y_delay ,objHappy_Platform);
                obj.speed = platform_speed
                obj.direction = 90;
                obj_cherry = instance_create(400 + x_delay * x_mirror,y_delay-16,objHappy_Bullet_01);
                obj_cherry.speed = obj.speed;
                obj_cherry.direction = obj.direction;
                obj_cherry.sprite_index=choose(sprHappy_MayuCherry,sprHappy_WBCherry);
                obj_cherry.image_xscale=random_range(1.25,1.75);
                obj_cherry.image_yscale=obj_cherry.image_xscale;
                obj_cherry.tag='S6_follow_platform';
                obj_cherry.persist=true;
                obj_cherry.aimlock=false;
                if line_cherry_case == 1 {
                    obj_cherry.killer = false;
                    obj_cherry.image_alpha = 0.4;
                }
                if line_cherry_case == 5 or line_cherry_case == 6 { obj_cherry.Type = "Hold" }
                if line_cherry_case == 7 { 
                    obj_cherry.Type = "Penalty"; 
                    obj_cherry.sprite_index=sprHappy_MayuCherry;
                    obj_cherry.image_blend=merge_color(c_white,c_red,0.5);
                }
            }
        }
    }
    
    var border1 = instance_create(-300,-300,objHappy_Bullet_trig_deco);
    border1.cen_x=0;
    border1.cen_y=0;
    border1.sprite_index=sprHappy_Border;
    //border1.image_blend=c_black;
    border1.tag='S6_border';
    border1.depth=-1000001;
    border1.t=180+60//random(360);
    var border2 = instance_create(-300,-300,objHappy_Bullet_trig_deco);
    border2.cen_x=800;
    border2.cen_y=608;
    border2.sprite_index=sprHappy_Border;
    border2.image_angle=180;
    //border2.image_blend=c_black;
    border2.tag='S6_border';
    border2.depth=-1000001;
    border2.t=60//random(360);
    for (var y_border = 0; y_border&lt;=608; y_border+=54) {
        var cherry_border1 = instance_create(-300,-300,objHappy_Bullet_trig);
        cherry_border1.sprite_index=sprHappy_BloodSpike;
        cherry_border1.image_xscale=random_range(1.5,3);
        cherry_border1.image_yscale= cherry_border1.image_xscale;
        cherry_border1.followDirection=false;
        cherry_border1.image_angle=random_range(-15,15);
        //cherry_border1.image_blend=merge_color(c_white,c_red,0.5);
        cherry_border1.cen_x=112+irandom(2.4*cherry_border1.image_xscale);
        cherry_border1.cen_y=y_border;
        cherry_border1.t=180+60;
        cherry_border1.tag='S6_cherry_border';
        cherry_border1.Type="Penalty";
        var cherry_border2 = instance_create(-300,-300,objHappy_Bullet_trig);
        cherry_border2.sprite_index=sprHappy_BloodSpike;
        cherry_border2.image_xscale=random_range(1.5,3);
        cherry_border2.image_yscale= cherry_border2.image_xscale;
        cherry_border2.followDirection=false;
        cherry_border2.image_angle=180+random_range(-15,15);
        //cherry_border2.image_blend=merge_color(c_white,c_red,0.5);
        cherry_border2.cen_x=800-112-irandom(2.4*cherry_border2.image_xscale);
        cherry_border2.cen_y=y_border;
        cherry_border2.t=60;
        cherry_border2.tag='S6_cherry_border';
        cherry_border2.Type="Penalty";
    }
    
    var spotlight = instance_create(90,(90/1.3),objHappy_Spotlight);
    spotlight.image_xscale=(800-(90*2))/800;
    spotlight.image_yscale=(608-((90/1.3)*2))/608;
    
    var darkness_transition = instance_create(0,0,objHappy_Darkness);
    darkness_transition.image_blend=c_black;
    darkness_transition.depth=-1002;
}

if t&gt;4940 and t&lt;5040 {
    view_xview[0]=EaseOutQuad(t-4940,256,96,100);
    view_yview[0]=EaseOutQuad(t-4940,(256/1.3)-96,(96/1.3),100);
    view_hview[0]=EaseOutQuad(t-4940,608-((256/1.3)*2)+32,608-((96/1.3)*2),100);
    view_wview[0]=EaseOutQuad(t-4940,800-(256*2),800-(96*2),100);
    with(objHappy_Darkness) {
        image_alpha-=1/90;
        if image_alpha&lt;=0 { instance_destroy(); }
    }
}

if t &gt;= 4940 and t &lt;= 5810 {
    if t&lt;5620 and t mod 80 == 20 {
        var circle_amount=choose(1,2,3);
        var distance = random_range(200,300);
        var distance_degrease = 100//random_range(64,128);
        var xx = irandom(800);
        var yy = 608+distance+96;
        var xx2 = irandom(800);
        var fall_speed=irandom_range(5,9);
        for (var circle_number = 0; circle_number &lt; circle_amount; circle_number++) {
            var random_angle = random(360);
            var angle_shift = 30 + 30*circle_number;
            var trig_curve =0.5*choose(-1,1);
            for (var angle = random_angle; angle &lt; random_angle+360; angle += angle_shift) {
                var circle = instance_create(-1000,-1000,objHappy_Bullet_trig_deco);
                circle.cen_x = xx;
                circle.cen_y = yy;
                circle.dir = angle;
                circle.len = distance - (distance_degrease * circle_number);
                circle.dir_inc = trig_curve;
                circle.sprite_index = sprHappy_WBCherry;
                circle.image_xscale = random_range(2.5,4);
                circle.image_yscale = circle.image_xscale;
                circle.image_alpha=0.15;
                //circle.Type = "Hold";
                circle.tag = 'S6_falling_circle';
                circle.persist=true;
                circle.subtag = -fall_speed;      //how fast will it fall
            }
            if t&lt;5340 and circle_number==0 {
                var trig_curve2 =0.5*choose(-1,1);
                for (var angle = random_angle; angle &lt; random_angle+360; angle += 60) {
                    var circle = instance_create(-1000,-1000,objHappy_Bullet_trig);
                    circle.cen_x = xx2;
                    circle.cen_y = yy;
                    circle.dir = angle;
                    circle.len = 333//distance - (distance_degrease * circle_number);
                    circle.dir_inc = trig_curve2;
                    circle.sprite_index = sprHappy_WBCherry;
                    circle.image_xscale = 3.5//random_range(2.5,4);
                    circle.image_yscale = circle.image_xscale;
                    //circle.Type = "Hold";
                    circle.tag = 'S6_falling_circle';
                    circle.persist=true;
                    circle.subtag = -5//fall_speed;      //how fast will it fall
                }
            }
        }
    }
    if t&gt;5340 and t&lt;5620 {
        if t mod 4 = 0 {
            var reversed_rain = instance_create(irandom(800),608+10,objHappy_Bullet_01);
            reversed_rain.direction=90+random_range(-15,15)
            reversed_rain.speed=random_range(3,7);
            reversed_rain.sprite_index=sprHappy_MayuCherry;
            reversed_rain.image_xscale=random_range(1,2);
            reversed_rain.image_yscale=reversed_rain.image_xscale;
            reversed_rain.aimlock=false;
            reversed_rain.tag='S6_reversed_rain';
            reversed_rain.persist=true;
        }
        with(objHappy_Bullet_trig) {
            if tag=='S6_falling_circle' {
                killer=false;
                if image_alpha&gt;0.15 { image_alpha-=0.05; }
                //subtag-=0.05;
            }
        }
    }
    if t==5340 { 
        shader = instance_create(0,0,objHappy_PersistSF);
        shader.affect_block=true;
        shader.affect_player=true;
        for (sf_cherry_spawner_angle=0; sf_cherry_spawner_angle&lt;360;sf_cherry_spawner_angle+=20) {
            var sf_cherry_spawner = instance_create(-400,-304,objHappy_Bullet_trig_deco);
            sf_cherry_spawner.cen_x=400;
            sf_cherry_spawner.cen_y=304;
            sf_cherry_spawner.dir=sf_cherry_spawner_angle;
            sf_cherry_spawner.len=point_distance(400,304,48,(48/1.3))+48;
            sf_cherry_spawner.tag='S6_sf_cherry_spawner';
            sf_cherry_spawner.subtag=3;
            sf_cherry_spawner.sprite_index=sprHappy_WBCherry
        }
    }
    if t&gt;5340 and t&lt;5730 {
        with(objHappy_Bullet_trig_deco) {
            if tag=='S6_sf_cherry_spawner' {
                len=EaseInSine(t,point_distance(400,304,48,(48/1.3))+48,64,5730-5340);
            }
        }
    }
    if t==5620 { 
        with(objPlatform) { replace=false; } 
    }
    if t&gt;5620 { 
        with(objHappy_Platform) {
            speed+=0.05;
        }
        with(objHappy_Bullet_01) {
            if tag=='S6_follow_platform' {
                speed+=0.05;
            }
        }
        with(objAvoidanceBullet) {
            killer=false;
        }
    }
    if t==5730 {
        spawn_circle(400,304,random(360),36,600,objHappy_Bullet_01,'S6_penta_circle');
        spawn_shape(400,304,30,3,24,600-16,objHappy_Bullet_01,'S6_penta');
        spawn_shape(400,304,210,3,24,600-16,objHappy_Bullet_01,'S6_penta');
        with(objHappy_Bullet_01) {
            if tag=='S6_penta' {
                killer=false;
                image_alpha=0;
                persist=true;
                destroyOutside=false;
            }
        }
    }
    if t==5731 {
        with(objHappy_Bullet_01) {
            if tag=='S6_penta' {
                var penta = instance_create(x,y,objHappy_Bullet_trig);
                penta.cen_x=400;
                penta.cen_y=304;
                penta.dir=direction;
                penta.dir_inc=3;
                penta.len=point_distance(400,304,x,y);
                penta.finlen=penta.len;
                penta.sprite_index=sprite_index;
                penta.depth=-1000010;
                penta.tag='S6_penta'
                instance_destroy();
            }
        }
        with(objPlayer) { frozen=true; }
    }
    if t&gt;5731 and t&lt;5810 {
        with(objHappy_Bullet_trig) {
            if tag=='S6_penta' or tag=='S6_penta_circle' {
                len=EaseOutQuint(t,finlen,finlen/4,79);
                dir_inc=EaseOutSine(t,2,0.2,79);
                if tag=='S6_penta_circle' {
                    var cool_shit = instance_create(x,y,objHappy_Bullet_01);
                    cool_shit.image_xscale=image_xscale;
                    cool_shit.image_yscale=image_yscale;
                    cool_shit.aimlock=false;
                    cool_shit.direction=dir;
                    cool_shit.speed=8;
                }
            }
        }
        objPlayer.x=EaseOutSine(t-5731,objPlayer.x,400,79);
        objPlayer.y=EaseOutSine(t-5731,objPlayer.y,304,79);
        view_xview[0]=EaseOutQuad(t-5731,96,192,100);
        view_yview[0]=EaseOutQuad(t-5731,(96/1.3),(192/1.3),100);
        view_hview[0]=EaseOutQuad(t-5731,608-((96/1.3)*2),608-((192/1.3)*2),100);
        view_wview[0]=EaseOutQuad(t-5731,800-(96*2),800-(192*2),100);
    }
    if t&lt;5730 and t mod 3 = 0 {
        var bottom_cherry = instance_create(irandom_range(120,800-120),608-64,objHappy_Bullet_01);
        //bottom_cherry.sprite_index=sprHappy_MayuCherry;
        bottom_cherry.image_xscale=random_range(1.5,3);
        bottom_cherry.image_yscale= bottom_cherry.image_xscale;
        bottom_cherry.followDirection=false;
        bottom_cherry.aimlock=false;
        //just for sure
        bottom_cherry.image_angle=random(360);
        bottom_cherry.image_blend=c_red//merge_color(c_white,c_red,0.5);
        bottom_cherry.direction=90+random_range(-15,15);
        bottom_cherry.speed=3;
        bottom_cherry.gravity=0.1;
        bottom_cherry.Type="Penalty"
        bottom_cherry.tag='S6_bottom_cherry';
        var bottom_cherry2 = instance_create(irandom_range(120,800-120),64,objHappy_Bullet_01);
        //bottom_cherry.sprite_index=sprHappy_MayuCherry;
        bottom_cherry2.image_xscale=random_range(1.5,3);
        bottom_cherry2.image_yscale= bottom_cherry2.image_xscale;
        bottom_cherry2.followDirection=false;
        bottom_cherry2.aimlock=false;
        bottom_cherry2.image_angle=random(360);
        bottom_cherry2.image_blend=c_red//merge_color(c_white,c_red,0.5);
        bottom_cherry2.direction=270+random_range(-15,15);
        bottom_cherry2.speed=3;
        bottom_cherry2.gravity=-0.1;
        bottom_cherry2.Type="Penalty"
        bottom_cherry2.tag='S6_bottom_cherry';
    }
    with(objHappy_Bullet_01) {
        if tag=='S6_follow_platform' {
            if y&lt;=304 { persist=false; }
        }
        if tag=='S6_reversed_rain' {
            if y&lt;500 { persist=false; }
        }
    }
    
    with(objHappy_Bullet_trig_deco) {
        if tag == 'S6_falling_circle' {
            cen_y += subtag;
            if (y&lt;0 &amp;&amp; cen_y&lt;0) { persist=false; destroyOutside=true }
        }
        if tag == 'S6_border' {
            cen_x+=dsin(t*2)/3;
        }
    }
    if t&lt;5800 {
        with(objHappy_Bullet_trig_deco) {
            if tag == 'S6_sf_cherry_spawner' {
                subtag--;
                if subtag==0 {
                    subtag=3;
                    var sf_cherry = instance_create(x,y,objHappy_SFArea);
                    sf_cherry.image_blend=c_red;
                    sf_cherry.image_xscale=random_range(2.25,3.75);
                    sf_cherry.image_yscale=sf_cherry.image_xscale;
                    sf_cherry.followDirection=false;
                    sf_cherry.aimlock=false;
                    sf_cherry.image_angle=random(360);
                    sf_cherry.direction=point_direction(x,y,400,304)+random_range(20,30);
                    sf_cherry.speed=random_range(4,6);
                    sf_cherry.friction=0.2
                }
            }
        }
    }
    with(objHappy_Bullet_trig) {
        if tag == 'S6_falling_circle' {
            cen_y += subtag;
            if (y&lt;0-sprite_get_height(sprHappy_WBCherry)*image_yscale-2 &amp;&amp; cen_y&lt;0) { persist=false; destroyOutside=true }
            //once it disappears from view, its gone
        }
        if tag == 'S6_cherry_border' {
            cen_x+=dsin(t*2)/3;
        }
    }
    view_angle[0]=dsin(t)/4;
    
}



}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean up


ds_list_destroy(attackNames);
ds_list_destroy(attackTimings);
ds_list_destroy(debugKeys);
ds_list_destroy(debugKeyTimings);
ds_list_destroy(debugKeyStartX);
ds_list_destroy(debugKeyStartY);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Call the cleanup event
event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug timeline
if(global.debugMode){
    draw_set_alpha(1);
    draw_set_colour(c_white);
    draw_rectangle_colour(32,32,room_width-32,48,c_black,c_black,c_black,c_black,0);
    var barPosition=lerp(32,room_width-32,(t-startTiming)/(endTiming-startTiming));
    draw_rectangle_colour(barPosition-0.5,32+8-16,barPosition+0.5,32+8+16,c_white,c_white,c_white,c_white,0);
    for(var i=0;i&lt;numTimings;++i){ //Display attack timings
        var markPosition=lerp(32,room_width-32,(attackTimings[|i]-startTiming)/(endTiming-startTiming));
        draw_set_alpha(0.7);
        draw_rectangle_colour(markPosition-1.0,32+8-16,markPosition+1.0,32+8+16,c_white,c_white,c_white,c_white,0);
        draw_set_alpha(1);
    }
    draw_set_font(fDefault12);
    draw_set_colour(c_white);
    draw_text(room_width-64,64,t);
    var spacing=32;
    for(var i=0;i&lt;global.numDebugSnaps;++i){
        if(highlight==i) draw_set_colour(c_yellow);
        draw_text(room_width-64,64+spacing*(i+1),global.debugSnaps[i]);
        draw_set_colour(c_white);
        var markPosition=lerp(32,room_width-32,(global.debugSnaps[i]-startTiming)/(endTiming-startTiming));
        draw_set_alpha(0.7);
        draw_rectangle_colour(markPosition-0.8,32+8-12,markPosition+0.8,32+8+12,c_white,c_white,c_white,c_white,0);
        draw_set_alpha(1);
    }
    highlight=-1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// do nothing

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
