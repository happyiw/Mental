<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1750</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init variables and shit

srf = noone;

text[0] = "test";

srf_alpha = 0.75;
srf_rectangle_alpha = 0.9;
advance_text_alpha = 0;

alarm[0] = 1; //amount_of_text = array_length_1d(text);

text_t = 0;
text_position = 0;
text_position_previous = 0;
current_sentence = 0;
text_length = string_length(text[0]);
output_text = "";
text_valign = 1;
text_halign = 1;
text_font = fAnCe18;
text_colour = c_white;
text_colour_outline = c_black;
text_frozen=false;

text_speed = 3; //in frames (1 - every frame, 2 - 2 every 2 frames, etc.);

draw_rectangle_outline = true;
draw_text_bg = true;

rectangle_x1 = x;
rectangle_y1 = y;
rectangle_x2 = x;
rectangle_y2 = y;

rectangle_lerp_amount = 0; //don't ask why i had to do this

text_alpha = 0;
rectangle_alpha = 0;

text_sound = noone;

amount_of_sounds = 1;

sound[0] = sndTextSoundA;

done = false;
done_t = 0;
done_t_max = 25;

started = false;
start_t = 0;
start_t_max = 40; //how long it takes to start

text_scale = 1;

skipped = false;

creator_instance = noone;

frozen = false;

bg_x = irandom(800);
bg_y = irandom(608);
bg_spd = 1;
bg_dir = 225;


remain=false;

shitty_variable=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(surface_exists(srf)) surface_free(srf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///get array length (here because of event order shenanigans)

amount_of_text = array_length_1d(text);
text_length = string_length(text[0]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///text a la Razzore

//scroll bg
bg_x += lengthdir_x(bg_spd,bg_dir);
bg_y += lengthdir_y(bg_spd,bg_dir);

if(started and !done){
    //shift (by default anyway) pressed
        if(input_check_pressed(KEY.JUMP) and !frozen){
            if(text_position = text_length){ //text finished playing, advance/delete the text object
                if((current_sentence + 1) &lt; amount_of_text){  // ADVANCE
                    current_sentence++;
                    text_t = 0;
                    text_position = 0;
                    text_length = string_length(text[current_sentence]);
                    output_text = "";
                    if(remain&amp;&amp;current_sentence==amount_of_text-1){
                        frozen=true;
                    }
                }
                else{
                    event_user(0); //do whatever the fuck whenever i copy this shit
                    done = true;
                }
            }
            else{ // skip the text 
                text_t = text_length;
                skipped = true; //for the rectangle to teleport to the correct coordinates
            }
        }
    //
    
    //advancing the text
        if(text_position &lt; text_length)and(!text_frozen){
            text_t += 1/text_speed; 
        }
        text_position_previous = text_position;
        text_position = floor(text_t);
    //
    
    //play sounds?! + set the output text
        if(text_position_previous != text_position){
            output_text = string_copy(text[current_sentence],0,text_position + 1);
            
            _sound_check = string_copy(text[current_sentence],text_position + 1,1);
            if(_sound_check != " "){
                var _sound = sound[irandom(amount_of_sounds - 1)];
                text_sound = audio_play_sound(_sound,0,0);
                audio_sound_pitch(text_sound,random_range(0.8,1.2));
            }
        }
    //
}

if(!frozen and started and !done) advance_text_alpha = lerp(advance_text_alpha,1,0.25);
else advance_text_alpha = lerp(advance_text_alpha,0,0.25);


if(!started){
    start_t++;
    
    var _amount = scrSinusoidEaseIn(start_t_max,start_t,0); //HI CTHAERE
    text_alpha = _amount;
    rectangle_alpha = _amount;
    
    if(start_t = start_t_max) started = true;
}

if(done){
    if (global.hitless){
        text_scale = lerp(text_scale,0,0.2); //laziness
        done_t++;
        
        var _amount = scrSinusoidEaseIn(done_t_max,done_t,0);
        text_alpha = 1 - _amount;
        rectangle_alpha = 1 - _amount;
        
        if(done_t = done_t_max) room_goto(rCredits);
    }
    if (!global.hitless)and(shitty_variable==2) {
        text_scale = lerp(text_scale,0,0.2); //laziness
        done_t++;
        
        var _amount = scrSinusoidEaseIn(done_t_max,done_t,0);
        text_alpha = 1 - _amount;
        rectangle_alpha = 1 - _amount;
        
        if(done_t = done_t_max) { 
            var a = instance_create(0,0,objBlackTransition);
            room_goto(rPreAvoidance);
        }
    }
    if (!global.hitless)and(shitty_variable==1) {
        done_t++;
        text_alpha=EaseOutSine(done_t,1,0,150);
        rectangle_alpha=EaseOutSine(done_t,1,0,150);
        if done_t&gt;=150 {
            var a = instance_create(0,0,objChooseYourFate)
            instance_destroy();
        }
    }
    if (!global.hitless)and(shitty_variable==0) {
        text_scale = lerp(text_scale,0,0.2); //laziness
        done_t++;
        
        var _amount = scrSinusoidEaseIn(done_t_max,done_t,0);
        text_alpha = 1 - _amount;
        rectangle_alpha = 1 - _amount;
        
        if(done_t = done_t_max) {
            
            var a = instance_create(0,0,objBlackTransition);
            room_goto(rClear);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///default: unfreeze controller instance
//to minimise copying this object, i'll usually just have some kind of controller create these
if(instance_exists(creator_instance)) with(creator_instance) frozen = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///any drawers?

//setup the scrolling surface

if(!surface_exists(srf)) srf = surface_create(800,608);

surface_set_target(srf);
draw_clear_alpha(c_black,0);
//draw_sprite_tiled(sprMarenolBullet,0,bg_x,bg_y);
draw_set_alpha(srf_rectangle_alpha);
draw_set_colour(c_black);
draw_rectangle(0,0,800,608,false);
surface_reset_target();


scrGoodDrawGUI();
draw_set_font(text_font);
if(draw_rectangle_outline or draw_text_bg){
    var _x1,_x2,_y1,_y2;
    if(!done){
        if(text_halign = 0){ // left
            _x1 = x - 10;
            _x2 = x + string_width(text[current_sentence]);
        }
        else if(text_halign = 1){ // Middle
            _x1 = x - string_width(text[current_sentence])/2;
            _x2 = x + string_width(text[current_sentence])/2;
        }
        else{ //righties
            _x1 = x - string_width(text[current_sentence]);
            _x2 = x;
        }
        
        if(text_halign = 0){ // up
            _y1 = y;
            _y2 = y + string_height(text[current_sentence]);
        }
        else if(text_halign = 1){ // Middle
            _y1 = y - string_height(text[current_sentence])/2;
            _y2 = y + string_height(text[current_sentence])/2;
        }
        else{ //downies
            _y1 = y - string_height(text[current_sentence]);
            _y2 = y;
        }
    }
    if(done){
        if(global.hitless) {
            _x1 = x;
            _x2 = x;
            _y1 = y;
            _y2 = y;
        }
        else {
            if(text_halign = 0){ // left
                _x1 = x - 10;
                _x2 = x + string_width(text[current_sentence]);
            }
            else if(text_halign = 1){ // Middle
                _x1 = x - string_width(text[current_sentence])/2;
                _x2 = x + string_width(text[current_sentence])/2;
            }
            else{ //righties
                _x1 = x - string_width(text[current_sentence]);
                _x2 = x;
            }
            
            if(text_halign = 0){ // up
                _y1 = y;
                _y2 = y + string_height(text[current_sentence]);
            }
            else if(text_halign = 1){ // Middle
                _y1 = y - string_height(text[current_sentence])/2;
                _y2 = y + string_height(text[current_sentence])/2;
            }
            else{ //downies
                _y1 = y - string_height(text[current_sentence]);
                _y2 = y;
            }
        }
    }
    
    //offsets
    if(!done)or(done and !global.hitless){
        _x1 -= 7;
        _x2 += 7;
        _y1 -= 5;
        _y2 += 5;
    }
    
    if(!skipped){
        rectangle_x1 = lerp(rectangle_x1,_x1,0.2);
        rectangle_y1 = lerp(rectangle_y1,_y1,0.2);
        rectangle_x2 = lerp(rectangle_x2,_x2,0.2);
        rectangle_y2 = lerp(rectangle_y2,_y2,0.2);
    }
    else{
        rectangle_x1 = _x1;
        rectangle_y1 = _y1;
        rectangle_x2 = _x2;
        rectangle_y2 = _y2;
        skipped = false;
    }
    
    draw_set_alpha(rectangle_alpha);
    if(draw_text_bg){
        draw_set_colour(c_black);
        draw_surface_general(srf,rectangle_x1,rectangle_y1,(rectangle_x2 - rectangle_x1),(rectangle_y2 - rectangle_y1),rectangle_x1,rectangle_y1,1,1,0,c_white,c_white,c_white,c_white,srf_alpha);//draw_rectangle(rectangle_x1,rectangle_y1,rectangle_x2,rectangle_y2,false);
    }
    if(draw_rectangle_outline){
        draw_set_colour(c_white);
        draw_rectangle(rectangle_x1,rectangle_y1,rectangle_x2,rectangle_y2,true);
    }
}

draw_set_alpha(text_alpha);
draw_set_halign(text_halign);
draw_set_valign(text_valign);
scrDrawTextOutlineTransformed(x,y,output_text,text_colour,text_colour_outline,text_scale,text_scale,0);

draw_set_alpha(advance_text_alpha);
draw_set_halign(2);
draw_set_valign(0);
draw_set_font(fAnCe12);
if(!done) draw_text_outline(rectangle_x2,rectangle_y2,"Press Jump Key to Advance",c_white,c_black);

//any resetters?
    draw_set_alpha(1);
    draw_set_halign(0);
    draw_set_valign(0);
    
scrResetGoodDrawGUI();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
